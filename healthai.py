# -*- coding: utf-8 -*-
"""HealthAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1st5ikwyxZ1VwmDcT8Oc_GGb9eiK6VP3X
"""

# AI Health Assistant using Granite 3.2
# Run this in Google Colab

# Install required packages
!pip install transformers torch gradio pillow reportlab pytesseract
!apt-get install tesseract-ocr

import gradio as gr
import torch
from transformers import AutoModelForCausalLM, AutoTokenizer
from PIL import Image
import pytesseract
import io
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
import base64
from datetime import datetime, timedelta
import re

class HealthAI:
    def __init__(self):
        print("Loading Granite 3.2 model...")
        self.model_name = "ibm-granite/granite-3.2-8b-instruct"

        # Load model and tokenizer
        self.tokenizer = AutoTokenizer.from_pretrained(self.model_name)
        self.model = AutoModelForCausalLM.from_pretrained(
            self.model_name,
            torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
            device_map="auto" if torch.cuda.is_available() else None
        )

        if self.tokenizer.pad_token is None:
            self.tokenizer.pad_token = self.tokenizer.eos_token

        print("Model loaded successfully!")

    def generate_response(self, prompt, max_length=512):
        """Generate response using Granite 3.2"""
        inputs = self.tokenizer(prompt, return_tensors="pt", padding=True, truncation=True)

        if torch.cuda.is_available():
            inputs = {k: v.cuda() for k, v in inputs.items()}

        with torch.no_grad():
            outputs = self.model.generate(
                **inputs,
                max_length=max_length,
                temperature=0.7,
                do_sample=True,
                pad_token_id=self.tokenizer.pad_token_id
            )

        response = self.tokenizer.decode(outputs[0], skip_special_tokens=True)
        # Remove the input prompt from response
        response = response[len(prompt):].strip()
        return response

    def extract_text_from_image(self, image):
        """Extract text from prescription image using OCR"""
        try:
            text = pytesseract.image_to_string(image)
            return text.strip()
        except Exception as e:
            return f"Error extracting text: {str(e)}"

    def dosage_predictor(self, age, prescription_text, prescription_image):
        """Predict dosage based on age and prescription"""
        # Handle image input
        prescription_info = prescription_text
        if prescription_image is not None:
            extracted_text = self.extract_text_from_image(prescription_image)
            prescription_info += f"\nExtracted from image: {extracted_text}"

        prompt = f"""
        As a medical AI assistant, analyze the following prescription and patient information to determine appropriate dosage:

        Patient Age: {age}
        Prescription Information: {prescription_info}

        Please provide:
        1. Recommended dosage based on age and prescription
        2. Frequency of medication
        3. Important safety considerations
        4. When to consult a doctor

        Note: This is for informational purposes only and should not replace professional medical advice.

        Response:"""

        response = self.generate_response(prompt)
        return response

    def natural_remedies(self, symptoms):
        """Suggest natural remedies for symptoms"""
        prompt = f"""
        As a natural health advisor, provide safe and effective natural remedies for the following symptoms:

        Symptoms: {symptoms}

        Please provide:
        1. 3-5 natural remedies with detailed instructions
        2. Ingredients and preparation methods
        3. Expected timeline for relief
        4. Safety precautions and contraindications
        5. When to seek medical attention

        Focus on evidence-based natural treatments that are generally safe.

        Natural Remedies:"""

        response = self.generate_response(prompt, max_length=600)
        return response

    def generate_health_report(self, heart_rate, blood_pressure, steps, sleep_hours, medicine_adherence, report_type):
        """Generate comprehensive health report"""
        current_date = datetime.now().strftime("%Y-%m-%d")

        prompt = f"""
        Generate a comprehensive {report_type} health report based on the following data:

        Report Date: {current_date}
        Heart Rate: {heart_rate} bpm
        Blood Pressure: {blood_pressure} mmHg
        Daily Steps: {steps}
        Sleep Hours: {sleep_hours}
        Medicine Adherence: {medicine_adherence}%

        Please provide:
        1. Overall health assessment
        2. Analysis of each metric with normal ranges
        3. Health trends and patterns
        4. Personalized recommendations for improvement
        5. Areas of concern (if any)
        6. Lifestyle modifications suggested
        7. When to consult healthcare provider

        Format as a professional medical summary suitable for sharing with healthcare providers.

        Health Report:"""

        response = self.generate_response(prompt, max_length=800)
        return response

    def create_pdf_report(self, report_content, patient_name="Patient"):
        """Create PDF report from health data"""
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=letter)
        styles = getSampleStyleSheet()
        story = []

        # Title
        title = Paragraph(f"<b>Health Report - {patient_name}</b>", styles['Title'])
        story.append(title)
        story.append(Spacer(1, 12))

        # Date
        date = Paragraph(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M')}", styles['Normal'])
        story.append(date)
        story.append(Spacer(1, 12))

        # Content
        content = Paragraph(report_content.replace('\n', '<br/>'), styles['Normal'])
        story.append(content)

        doc.build(story)
        buffer.seek(0)
        return buffer

    def health_education(self, question):
        """Provide detailed health education responses"""
        prompt = f"""
        As a health education specialist, provide a comprehensive, evidence-based answer to this health question:

        Question: {question}

        Please provide:
        1. Detailed explanation with scientific backing
        2. Practical examples and applications
        3. Specific recommendations with quantities/frequencies
        4. Common myths vs. facts
        5. Additional tips for optimal health
        6. When to consult healthcare professionals

        Make the response educational, accurate, and easy to understand for general audiences.

        Health Education Response:"""

        response = self.generate_response(prompt, max_length=700)
        return response

    def emergency_guidance(self, emergency_situation):
        """Provide step-by-step emergency guidance"""
        prompt = f"""
        Provide immediate, step-by-step emergency guidance for the following situation:

        Emergency: {emergency_situation}

        Please provide:
        1. IMMEDIATE STEPS (first 2-3 minutes)
        2. Detailed step-by-step instructions
        3. What to look for (warning signs)
        4. When to call emergency services (911)
        5. What NOT to do (important warnings)
        6. Follow-up care recommendations

        Format as clear, numbered steps that can be followed quickly under stress.

        EMERGENCY GUIDANCE:"""

        response = self.generate_response(prompt, max_length=600)
        return response

# Initialize the AI model
print("Initializing Health AI Assistant...")
health_ai = HealthAI()

# Gradio Interface Functions
def dosage_interface(age, prescription_text, prescription_image):
    if not age or (not prescription_text and prescription_image is None):
        return "Please provide age and either prescription text or image."
    return health_ai.dosage_predictor(age, prescription_text, prescription_image)

def remedies_interface(symptoms):
    if not symptoms:
        return "Please enter your symptoms."
    return health_ai.natural_remedies(symptoms)

def health_report_interface(heart_rate, blood_pressure, steps, sleep_hours, medicine_adherence, report_type):
    report = health_ai.generate_health_report(heart_rate, blood_pressure, steps, sleep_hours, medicine_adherence, report_type)

    # Create PDF
    pdf_buffer = health_ai.create_pdf_report(report)
    pdf_path = f"/tmp/health_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"

    with open(pdf_path, 'wb') as f:
        f.write(pdf_buffer.getvalue())

    return report, pdf_path

def education_interface(question):
    if not question:
        return "Please ask a health-related question."
    return health_ai.health_education(question)

def emergency_interface(situation):
    if not situation:
        return "Please describe the emergency situation."
    return health_ai.emergency_guidance(situation)

# Create Gradio Interface
with gr.Blocks(title="AI Health Assistant", theme=gr.themes.Soft()) as app:
    gr.Markdown("# üè• AI Health Assistant powered by Granite 3.2")
    gr.Markdown("Comprehensive health support with AI-powered insights and recommendations")

    with gr.Tabs():
        # Dosage Predictor Tab
        with gr.TabItem("üíä Dosage Predictor"):
            gr.Markdown("### Get dosage recommendations based on age and prescription")
            with gr.Row():
                with gr.Column():
                    age_input = gr.Number(label="Age", value=30)
                    prescription_text = gr.Textbox(label="Prescription Text", lines=3)
                    prescription_image = gr.Image(label="Upload Prescription Image", type="pil")
                    dosage_btn = gr.Button("Get Dosage Recommendation", variant="primary")
                with gr.Column():
                    dosage_output = gr.Textbox(label="Dosage Recommendation", lines=10)

            dosage_btn.click(
                dosage_interface,
                inputs=[age_input, prescription_text, prescription_image],
                outputs=dosage_output
            )

        # Natural Remedies Tab
        with gr.TabItem("üåø Natural Remedies"):
            gr.Markdown("### Get natural remedy suggestions for your symptoms")
            with gr.Row():
                with gr.Column():
                    symptoms_input = gr.Textbox(label="Enter Your Symptoms", lines=3, placeholder="e.g., headache, nausea, cold symptoms")
                    remedies_btn = gr.Button("Get Natural Remedies", variant="primary")
                with gr.Column():
                    remedies_output = gr.Textbox(label="Natural Remedies", lines=15)

            remedies_btn.click(
                remedies_interface,
                inputs=symptoms_input,
                outputs=remedies_output
            )

        # Health Report Tab
        with gr.TabItem("üìä Health Report Generator"):
            gr.Markdown("### Generate comprehensive health reports")
            with gr.Row():
                with gr.Column():
                    heart_rate = gr.Number(label="Heart Rate (bpm)", value=72)
                    blood_pressure = gr.Textbox(label="Blood Pressure", value="120/80")
                    steps = gr.Number(label="Daily Steps", value=8000)
                    sleep_hours = gr.Number(label="Sleep Hours", value=7.5)
                    medicine_adherence = gr.Slider(label="Medicine Adherence (%)", minimum=0, maximum=100, value=90)
                    report_type = gr.Dropdown(label="Report Type", choices=["Weekly", "Monthly"], value="Weekly")
                    report_btn = gr.Button("Generate Health Report", variant="primary")
                with gr.Column():
                    report_output = gr.Textbox(label="Health Report", lines=15)
                    pdf_download = gr.File(label="Download PDF Report")

            report_btn.click(
                health_report_interface,
                inputs=[heart_rate, blood_pressure, steps, sleep_hours, medicine_adherence, report_type],
                outputs=[report_output, pdf_download]
            )

        # Health Education Tab
        with gr.TabItem("üéì Health Education"):
            gr.Markdown("### Ask health questions and get detailed explanations")
            with gr.Row():
                with gr.Column():
                    health_question = gr.Textbox(label="Ask a Health Question", lines=3, placeholder="e.g., What foods are good for blood pressure?")
                    education_btn = gr.Button("Get Health Information", variant="primary")
                with gr.Column():
                    education_output = gr.Textbox(label="Health Education Response", lines=15)

            education_btn.click(
                education_interface,
                inputs=health_question,
                outputs=education_output
            )

        # Emergency Guidance Tab
        with gr.TabItem("üö® Emergency Guidance"):
            gr.Markdown("### Get step-by-step emergency guidance")
            gr.Markdown("‚ö†Ô∏è **For life-threatening emergencies, call 911 immediately!**")
            with gr.Row():
                with gr.Column():
                    emergency_situation = gr.Textbox(label="Describe Emergency Situation", lines=3, placeholder="e.g., Child has high fever, someone is choking")
                    emergency_btn = gr.Button("Get Emergency Guidance", variant="secondary")
                with gr.Column():
                    emergency_output = gr.Textbox(label="Emergency Guidance", lines=15)

            emergency_btn.click(
                emergency_interface,
                inputs=emergency_situation,
                outputs=emergency_output
            )

# Launch the application
if __name__ == "__main__":
    app.launch(debug=True, share=True)